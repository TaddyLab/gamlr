library(gamlr  )
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
y <- 4 + 3*x[,1] + -1*x[,2] + rnorm(n)
fitlasso <- gamlr(x, y, gamma=0, lambda.min.ratio=1e-3) # lasso
fitgl <- gamlr(x, y, gamma=2, lambda.min.ratio=1e-3) # small gamma
family="gaussian"
gamma=0
nlambda=100
lambda.start=Inf
lambda.min.ratio=0.01
free=NULL
standardize=TRUE
obsweight=NULL
varweight=NULL
prexx=(p<500)
tol=1e-7
maxit=1e5
verb=FALSE
on.exit(.C("gamlr_cleanup", PACKAGE = "gamlr"))
## integer family codes
family=match.arg(family)
famid = switch(family,
"gaussian"=1, "binomial"=2, "poisson"=3)
## data checking (more follows)
y <- checky(y,family)
n <- length(y)
# observation weights
if(!is.null(obsweight))
if(family!="gaussian"){
warning("non-null obsweight are ignored for family!=gaussian")
obsweight <- NULL }
if(is.null(obsweight)) obsweight <- rep(1,n)
stopifnot(all(obsweight>0))
stopifnot(length(obsweight)==n)
## extras
xtr = list()
## aliases from glmnet or other gamlr terminology
if(!is.null(xtr$thresh)) tol = xtr$thresh
if(!is.null(xtr$lmr)) lambda.min.ratio = xtr$lmr
if(!is.null(xtr$scale)) standardize = xtr$scale
if(!is.null(xtr[['fix']])) xtr$shift = xtr$fix
## max re-weights
if(is.null(xtr$maxrw)) xtr$maxrw = maxit # practically inf
maxrw = xtr$maxrw
## fixed shifts
eta <- rep(0.0,n)
if(!is.null(xtr$shift)){
if(family=="gaussian") y = y-xtr$shift
else eta <- xtr$shift   }
stopifnot(length(eta)==n)
eta <- as.double(eta)
## get x dimension and names
if(is.null(x)){
if(any(c(family!="gaussian",
is.null(xtr$vxx),
is.null(xtr$vxy),
is.null(xtr$vxsum),
is.null(xtr$xbar))))
stop("xx,xy,xsum,xbar are NULL or family!=`gaussian';
this is not allowed if x=NULL")
p <- length(xtr$xbar)
varnames <- names(xtr$xbar)
x <- Matrix(0)
} else{
if(inherits(x,"numeric")) x <- matrix(x)
if(inherits(x,"data.frame")) x <- as.matrix(x)
if(inherits(x,"simple_triplet_matrix"))
x <- sparseMatrix(i=x$i,j=x$j,x=x$v,
dims=dim(x),dimnames=dimnames(x))
p <- ncol(x)
varnames <- colnames(x)
stopifnot(nrow(x)==n)
}
if(is.null(varnames)) varnames <- paste(1:p)
# fixedcost (undocumented: additional fixed l1 penalty)
if(is.null(xtr$fixedcost))
xtr$fixedcost <- 0
fixedcost = xtr$fixedcost
if(length(fixedcost)!=p){
fixedcost <- rep(fixedcost[1],p) }
## unpenalized columns
if(length(free)==0) free <- NULL
if(!is.null(free)){
if(inherits(free,"character")){
free <- na.omit(match(free,varnames))
if(length(free)==0) free <- NULL
print(free)}
if(any(free < 1) | any(free>p)) stop("bad free argument.")
if(length(free)==p){
nlambda <- 1
lambda.start <- 0
}
}
## variable (penalty) weights
if(is.null(varweight)) varweight <- rep(1,p)
stopifnot(all(varweight>=0))
stopifnot(length(varweight)==p)
varweight[free] <- 0
## check and clean all arguments
stopifnot(lambda.min.ratio<=1)
stopifnot(all(c(nlambda,lambda.min.ratio)>0))
stopifnot(all(c(lambda.start)>=0))
stopifnot(all(c(tol,maxit)>0))
if(lambda.start==0){
nlambda <- 1
standardize <- 0 }
lambda <- double(nlambda)
lambda[1] <- lambda.start
## stepsize
delta <- exp( log(lambda.min.ratio)/(nlambda-1) )
## adaptation
stopifnot(all(gamma>=0))
if(length(gamma)==1){
gamvec <- rep(gamma,p)
} else{
gamvec <- gamma }
stopifnot(length(gamvec)==p)
gamvec[free] <- 0
## PREXX stuff
prexx = (prexx | !is.null(xtr$vxx)) & (family=="gaussian")
if(prexx){
if(is.null(xtr$xbar))
xtr$xbar <- colMeans(x)
xbar <- as.double(xtr$xbar)
if(is.null(xtr$vxsum))
xtr$vxsum <- colSums(x*obsweight)
vxsum <- as.double(xtr$vxsum)
if(is.null(xtr$vxx))
xtr$vxx <- crossprod(x*sqrt(obsweight))
vxx <- Matrix(xtr$vxx,sparse=FALSE,doDiag=FALSE)
vxx <- as(vxx,"dspMatrix")
stopifnot(ncol(vxx)==p)
if(vxx@uplo=="L") vxx <- t(vxx)
vxx <- as.double(vxx@x)
if(is.null(xtr$vxy))
xtr$vxy <- drop(crossprod(x,y*obsweight))
vxy <- as.double(drop(xtr$vxy))
stopifnot(all(p==
c(length(xbar),length(vxsum),length(vxy))))
} else{
xbar <- double(p)
vxsum <- double(p)
vxy <- double(p)
vxx <- double(0)
}
## final x formatting
x=as(x,"dgCMatrix")
stopifnot(all(is.finite(x@x)))
fit <- .C("gamlr",
famid=as.integer(famid),
n=n,
p=p,
l=length(x@i),
xi=x@i,
xp=x@p,
xv=as.double(x@x),
y=y,
prexx=as.integer(prexx),
xbar=xbar,
xsum=vxsum,
xx=vxx,
xy=vxy,
eta=eta,
varweight=as.double(varweight),
obsweight=as.double(obsweight),
standardize=as.integer(standardize>0),
nlambda=as.integer(nlambda),
delta=as.double(delta),
gamma=gamvec,
fixedcost=as.double(fixedcost),
tol=as.double(tol),
maxit=as.integer(rep(maxit,nlambda)),
maxrw=as.integer(rep(maxrw,nlambda)),
lambda=as.double(lambda),
deviance=double(nlambda),
df=double(nlambda),
alpha=as.double(rep(0,nlambda)),
beta=as.double(rep(0,nlambda*p)),
exits=integer(nlambda),
verb=as.integer(verb>0),
PACKAGE="gamlr",
NAOK=TRUE,
dup=FALSE)
library(gamlr  )
fit <- .C("gamlr",
famid=as.integer(famid),
n=n,
p=p,
l=length(x@i),
xi=x@i,
xp=x@p,
xv=as.double(x@x),
y=y,
prexx=as.integer(prexx),
xbar=xbar,
xsum=vxsum,
xx=vxx,
xy=vxy,
eta=eta,
varweight=as.double(varweight),
obsweight=as.double(obsweight),
standardize=as.integer(standardize>0),
nlambda=as.integer(nlambda),
delta=as.double(delta),
gamma=gamvec,
fixedcost=as.double(fixedcost),
tol=as.double(tol),
maxit=as.integer(rep(maxit,nlambda)),
maxrw=as.integer(rep(maxrw,nlambda)),
lambda=as.double(lambda),
deviance=double(nlambda),
df=double(nlambda),
alpha=as.double(rep(0,nlambda)),
beta=as.double(rep(0,nlambda*p)),
exits=integer(nlambda),
verb=as.integer(verb>0),
PACKAGE="gamlr",
NAOK=TRUE,
dup=FALSE)
xbar
vxx
vxy
as.integer(standardize>0)
library(gamlr  )
fit <- .C("gamlr",
famid=as.integer(famid),
n=n,
p=p,
l=length(x@i),
xi=x@i,
xp=x@p,
xv=as.double(x@x),
y=y,
prexx=as.integer(prexx),
xbar=xbar,
xsum=vxsum,
xx=vxx,
xy=vxy,
eta=eta,
varweight=as.double(varweight),
obsweight=as.double(obsweight),
standardize=as.integer(standardize>0),
nlambda=as.integer(nlambda),
delta=as.double(delta),
gamma=gamvec,
fixedcost=as.double(fixedcost),
tol=as.double(tol),
maxit=as.integer(rep(maxit,nlambda)),
maxrw=as.integer(rep(maxrw,nlambda)),
lambda=as.double(lambda),
deviance=double(nlambda),
df=double(nlambda),
alpha=as.double(rep(0,nlambda)),
beta=as.double(rep(0,nlambda*p)),
exits=integer(nlambda),
verb=as.integer(verb>0),
PACKAGE="gamlr",
NAOK=TRUE,
dup=FALSE)
x@x
dim(x@x)
length(x@x)
x@i
x@p
x
x@x
beta <- 1:100
y <- log ( 1 + 2* abs(beta))
plot(beta, y)
plot(beta, beta^2)
plot(beta, abs(beta))
y <- 1/( 1 + 2* abs(beta))
plot(beta, y)
y <- (-2)/( 1 + 2* abs(beta))^2
plot(beta, y)
beta <- 1:100
w <- log(0.2*dnorm(beta, 0, 0.1) + 0.2*dnorm(beta, 0, 0.5) + 0.2*dnorm(beta, 0, 1)
+ 0.2*dnorm(beta, 0, 2) + 0.2*dnorm(beta, 0, 5))
plot(beta, w)
y <- 1/( 1 + 2* abs(beta))
plot(beta, y)
plot(beta, beta^2)
beta <- 1:100
y <- log ( 1 + 2* abs(beta))
plot(beta, y)
y <- (-2)/( 1 + 2* abs(beta))^2
plot(beta, y)
beta <- 1:100
w <- log(0.2*dnorm(beta, 0, 0.1) + 0.2*dnorm(beta, 0, 0.5) + 0.2*dnorm(beta, 0, 1)
+ 0.2*dnorm(beta, 0, 2) + 0.2*dnorm(beta, 0, 5))
plot(beta, w)
beta <- 1:100
y <- log ( 1 + 2* abs(beta))
plot(beta, y)
beta <- 1:100
w <- -log(0.2*dnorm(beta, 0, 0.1) + 0.2*dnorm(beta, 0, 0.5) + 0.2*dnorm(beta, 0, 1)
+ 0.2*dnorm(beta, 0, 2) + 0.2*dnorm(beta, 0, 5))
plot(beta, w)
y <- 1/( 1 + 2* abs(beta))
plot(beta, y)
beta <- 1:100
y <- log ( 1 + 2* abs(beta))
plot(beta, y)
plot(beta, beta^2)
beta <- 1:100
w <- -log(0.2*dnorm(beta, 0, 0.1) + 0.2*dnorm(beta, 0, 0.5) + 0.2*dnorm(beta, 0, 1)
+ 0.2*dnorm(beta, 0, 2) + 0.2*dnorm(beta, 0, 5))
plot(beta, w)
plot(beta, beta^2)
beta <- 1:100
w <- -log(0.8*dnorm(beta, 0, 0.00001) + 0.05*dnorm(beta, 0, 0.5) + 0.05*dnorm(beta, 0, 1)
+ 0.05*dnorm(beta, 0, 2) + 0.05*dnorm(beta, 0, 5))
plot(beta, w)
plot(beta, beta^2)
beta <- seq(0, 20, length.out = 100)
beta
beta <- seq(0, 20, length.out = 100)
w <- -log(0.8*dnorm(beta, 0, 0.00001) + 0.05*dnorm(beta, 0, 0.5) + 0.05*dnorm(beta, 0, 1)
+ 0.05*dnorm(beta, 0, 2) + 0.05*dnorm(beta, 0, 5))
plot(beta, w)
plot(beta, beta^2)
beta <- seq(0, 10, length.out = 1000)
w <- -log(0.9*dnorm(beta, 0, 0.00001) + 0.025*dnorm(beta, 0, 0.5) + 0.025*dnorm(beta, 0, 1)
+ 0.025*dnorm(beta, 0, 2) + 0.025*dnorm(beta, 0, 5))
plot(beta, w)
plot(beta, beta^2)
library(gamlr  )
